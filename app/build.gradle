apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'project-report'
apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.jobinlawrance.pics"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.jobinlawrance.pics.PicsTestRunner"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
        jacoco {
            includeNoLocationClasses = true
        }
    }

    /*
    * this is to use mock response json files in both unit test and espresso tests
    * Do not confuse resource with res
    * resource dir is for java resource files and res is for android resource files
    */
    sourceSets.test.resources.srcDirs += ["src/androidTest/resources"]

    // adding kotlin dir as source set for all (main, debug, androidTest etc)
    sourceSets.all { sourceSet ->
        sourceSet.java.srcDirs += "src/${sourceSet.name}/kotlin"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
                      // Dagger Generated classes
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class', // covers component implementations
                      '**/Dagger*Component$Builder.class', // covers component builders
                      '**/*Module_*Factory.class',
                      '**/*_Factory.class',
                      // Paperparcel
                      '**/PaperParcel*.class',
                      // Glide
                      '**/bumptech/glide/*class',
                      '**/Glide*.class',

    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec'
    ])
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile "com.android.support:support-annotations:${versions.supportLibrary}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:${versions.espresso}"
    androidTestCompile "com.android.support.test:runner:${versions.supportTest}"
    androidTestCompile "com.android.support.test:rules:${versions.supportTest}"
    androidTestCompile "org.hamcrest:hamcrest-library:${versions.hamcrest}"
    androidTestCompile "org.mockito:mockito-android:${versions.mockito}"
    androidTestCompile "com.linkedin.testbutler:test-butler-library:${versions.testButler}"
    androidTestCompile("com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}")

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.mockito:mockito-core:${versions.mockito}"
    testCompile("com.nhaarman:mockito-kotlin:${versions.mockitoKotlin}")
    testCompile "com.github.fabioCollini:DaggerMock:${versions.daggerMock}"
    testCompile "com.squareup.okhttp3:mockwebserver:${versions.okHttp}"

    compile "com.android.support:appcompat-v7:${versions.supportLibrary}"
    compile "com.android.support:recyclerview-v7:${versions.supportLibrary}"
    compile "com.android.support.constraint:constraint-layout:${versions.constrainLayout}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:${versions.kotlin}"
    compile "com.github.bumptech.glide:glide:${versions.glide}"
    compile "com.github.bumptech.glide:okhttp3-integration:${versions.glide}"
    compile("com.github.bumptech.glide:recyclerview-integration:${versions.glide}") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    compile "com.squareup.okhttp3:okhttp:${versions.okHttp}"
    compile "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    compile "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    compile "com.google.dagger:dagger:${versions.dagger}"
    compile "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    compile "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
    compile "com.hannesdorfmann.mosby3:mvi:${versions.mosby}"
    compile "com.jakewharton.timber:timber:${versions.timber}"
    compile "com.facebook.stetho:stetho:${versions.stetho}"
    compile "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
    compile "nz.bradcampbell:paperparcel:${versions.paperParcel}"
    compile "com.github.jobinlawrance:okhttp3-downloadprogress-interceptor:${versions.downloadInterceptor}"

    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    kapt "nz.bradcampbell:paperparcel-compiler:${versions.paperParcel}"

    kaptAndroidTest "com.google.dagger:dagger-compiler:${versions.dagger}"
}
repositories {
    mavenCentral()
}
